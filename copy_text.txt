from typing import Type, Any
import marshmallow_dataclass
from marshmallow import EXCLUDE
import logging

# Initialize logger
logger = logging.getLogger(__name__)

def convert_to_object(class_object: Type[Any], response: str) -> Any:
    try:
        response_schema = marshmallow_dataclass.class_schema(class_object)()
        return response_schema.loads(response, unknown=EXCLUDE)
    
    except marshmallow.exceptions.ValidationError as error:
        logger.error(error)
        raise ValidationException(*error.args, 480)
    
    except Exception as error:
        logger.error('Validation failed for the given request', exc_info=error)
        raise ValidationException("Validation failed for the given request", 400)







from enum import Enum

class Status(Enum):
    ACTIVE = 'active'
    INACTIVE = 'inactive'
    PENDING = 'pending'

class UserType(Enum):
    ADMIN = 'admin'
    USER = 'user'
    GUEST = 'guest'



from marshmallow import Schema, fields, ValidationError, EXCLUDE

class EnumField(fields.Field):
    def __init__(self, enum: Enum, *args, **kwargs):
        self.enum = enum
        super().__init__(*args, **kwargs)

    def _deserialize(self, value, attr, data, **kwargs):
        try:
            return self.enum(value)
        except ValueError:
            raise ValidationError(f"Invalid value for {self.enum.__name__}: {value}")

    def _serialize(self, value, attr, obj, **kwargs):
        if isinstance(value, self.enum):
            return value.value
        return super()._serialize(value, attr, obj, **kwargs)

class UserSchema(Schema):
    id = fields.Int(required=True)
    name = fields.Str(required=True)
    status = EnumField(Status, required=True)
    user_type = EnumField(UserType, required=True)
    email = fields.Email()





import marshmallow
import marshmallow_dataclass
import logging
from typing import Type, Any
from marshmallow import EXCLUDE

# Initialize logger
logger = logging.getLogger(__name__)

class ValidationException(Exception):
    def __init__(self, message: str, code: int):
        super().__init__(message)
        self.code = code

def convert_to_object(class_object: Type[Any], response: str) -> Any:
    try:
        # Create a schema from the dataclass
        response_schema = marshmallow_dataclass.class_schema(class_object)()
        
        # Load and validate the data
        data = response_schema.loads(response, unknown=EXCLUDE)
        
        return data
    
    except marshmallow.exceptions.ValidationError as error:
        logger.error('Validation error: %s', error.messages)
        raise ValidationException("Validation error occurred", 480)
    
    except marshmallow.exceptions.MarshmallowError as error:
        logger.error('Marshmallow error: %s', error)
        raise ValidationException("Marshmallow error occurred", 400)
    
    except Exception as error:
        logger.error('An unexpected error occurred: %s', error, exc_info=True)
        raise ValidationException("Validation failed for the given request", 400)






from dataclasses import dataclass

@dataclass
class User:
    id: int
    name: str
    status: Status
    user_type: UserType
    email: str

# Example JSON data
json_data = '{"id": 123, "name": "John Doe", "status": "active", "user_type": "admin", "email": "john.doe@example.com"}'

# Convert JSON to User object
try:
    user = convert_to_object(User, json_data)
    print(user)
except ValidationException as e:
    print(f"Validation error: {e}")
