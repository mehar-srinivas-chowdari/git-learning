from pyspark.sql import Window
import pyspark.sql.functions as F

# Assuming df is your PySpark DataFrame
# Step 1: Sum amt1, amt2, amt3, amt4
df = df.withColumn('total_amt', F.col('amt1') + F.col('amt2') + F.col('amt3') + F.col('amt4'))

# Step 2: Create window spec to order by date for each ID
window_spec = Window.partitionBy('id').orderBy(F.col('date'))

# Step 3: Define function to adjust negative amounts upwards (bottom to top)
def adjust_negatives_up(df):
    while True:
        # Filter for negative total amounts
        negative_rows = df.filter(F.col('total_amt') < 0)

        if negative_rows.count() == 0:
            break  # No more negative rows to adjust

        # Shift negative amounts to the previous row (bottom to top)
        df = df.withColumn(
            'shifted_amt', 
            F.lag('total_amt', 1).over(window_spec)
        ).withColumn(
            'total_amt', 
            F.when(F.col('total_amt') < 0, F.col('total_amt') + F.col('shifted_amt'))
             .otherwise(F.col('total_amt'))
        )
    
    return df.drop('shifted_amt')

# Step 4: Define function to adjust negative amounts downwards (top to bottom)
def adjust_negatives_down(df):
    while True:
        # Filter for negative total amounts
        negative_rows = df.filter(F.col('total_amt') < 0)

        if negative_rows.count() == 0:
            break  # No more negative rows to adjust

        # Shift negative amounts to the next row (top to bottom)
        df = df.withColumn(
            'shifted_amt', 
            F.lead('total_amt', 1).over(window_spec)
        ).withColumn(
            'total_amt', 
            F.when(F.col('total_amt') < 0, F.col('total_amt') + F.col('shifted_amt'))
             .otherwise(F.col('total_amt'))
        )
    
    return df.drop('shifted_amt')

# Step 5: Apply the top-to-bottom and bottom-to-top adjustments
df = adjust_negatives_up(df)
df = adjust_negatives_down(df)

# Step 6: If any total_amt is still negative, make it zero
df = df.withColumn('total_amt', F.when(F.col('total_amt') < 0, 0).otherwise(F.col('total_amt')))

# Step 7: Remove rows where total_amt is zero
df = df.filter(F.col('total_amt') != 0)

# Step 8: Show final DataFrame
df.show()