import unittest
from unittest.mock import patch, Mock
from types import SimpleNamespace
import json
from your_module import trigger_validation, ValidationException  # Replace 'your_module' with the actual module name

class TestTriggerValidation(unittest.TestCase):

    @patch('your_module.logger')
    @patch('your_module.route_request')
    def test_trigger_validation_success(self, mock_route_request, mock_logger):
        # Prepare mock objects and inputs
        mock_logger.set_trace_id.return_value = None
        mock_logger.info.return_value = None

        event = {
            "body": json.dumps({"key": "value"})
        }
        context = SimpleNamespace(aws_request_id="1802497")
        
        # Expected response
        expected_response = {
            "statusCode": 200,
            "body": json.dumps({"message": "Request processed successfully"})
        }
        
        # Call the function
        actual_response = trigger_validation(event, context)
        
        # Assertions
        mock_logger.set_trace_id.assert_called_once_with("1802497")
        mock_logger.info.assert_any_call('Starting validation process. Trace ID: 1802497')
        mock_logger.info.assert_any_call(f'Lambda event object: {event}')
        mock_logger.info.assert_any_call('Lambda request body: {"key": "value"}')
        mock_route_request.assert_called_once_with({"key": "value"}, "1802497")
        mock_logger.info.assert_any_call('Successfully routed request: {"key": "value"}')
        self.assertEqual(actual_response, expected_response)
    
    @patch('your_module.logger')
    @patch('your_module.route_request')
    def test_trigger_validation_no_body(self, mock_route_request, mock_logger):
        # Prepare mock objects and inputs
        mock_logger.set_trace_id.return_value = None
        mock_logger.info.return_value = None
        mock_logger.error.return_value = None

        event = {
            "body": None
        }
        context = SimpleNamespace(aws_request_id="1802497")
        
        # Expected response
        expected_response = {
            "statusCode": 400,
            "body": json.dumps({"message": "Input not passed. Please pass correct values!!"})
        }
        
        # Call the function
        actual_response = trigger_validation(event, context)
        
        # Assertions
        mock_logger.set_trace_id.assert_called_once_with("1802497")
        mock_logger.error.assert_called_once_with("Input not passed. Please pass correct values!!")
        self.assertEqual(actual_response, expected_response)
        mock_route_request.assert_not_called()
    
    @patch('your_module.logger')
    @patch('your_module.route_request')
    def test_trigger_validation_validation_exception(self, mock_route_request, mock_logger):
        # Prepare mock objects and inputs
        mock_logger.set_trace_id.return_value = None
        mock_logger.info.return_value = None
        mock_logger.error.return_value = None

        event = {
            "body": json.dumps({"key": "value"})
        }
        context = SimpleNamespace(aws_request_id="1802497")
        
        # Setup the mock to raise ValidationException
        exception = ValidationException("Validation error occurred", error_code=422)
        mock_route_request.side_effect = exception
        
        # Expected response
        expected_response = {
            "statusCode": 422,
            "body": json.dumps({"message": "Validation error occurred"})
        }
        
        # Call the function
        actual_response = trigger_validation(event, context)
        
        # Assertions
        mock_logger.set_trace_id.assert_called_once_with("1802497")
        mock_logger.info.assert_any_call('Starting validation process. Trace ID: 1802497')
        mock_logger.info.assert_any_call(f'Lambda event object: {event}')
        mock_logger.info.assert_any_call('Lambda request body: {"key": "value"}')
        mock_logger.error.assert_called_once_with(
            "Validation Exception occurred while processing the request: Validation error occurred", 
            exc_info=True
        )
        self.assertEqual(actual_response, expected_response)
        mock_route_request.assert_called_once_with({"key": "value"}, "1802497")

if __name__ == '__main__':
    unittest.main()
